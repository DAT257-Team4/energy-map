<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>EnergyMap</title>
    <link rel="stylesheet" href="/stylesheets/style.css">
    <link rel="icon" href="/images/favicon.ico" type="image/x-icon">
    
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
      google.charts.load("current", {
        packages: ["geochart", "corechart"]
      });

      const test_data = [
          ["Country", "Solar", "Nuclear", "Hydro Water Reservoir", "WindOffshore", "FossilGas"],
          ["Germany", 200, 500, 800, 600, 10000],
          ["Sweden", 300, 600, 700, 800, 1000],
          ["France", 400, 500, 300, 200, 100],
          ["Italy", 200, 400, 500, 600, 10],
          ["Spain", 300, 200, 400, 500, 0],
          ["Greece", 400, 500, 600, 700, 0],
        ];


      let pubBackgroundColor = "rgb(54, 57, 62)";

      let input_data = JSON.parse('<%- data %>');
      console.log(input_data);  
      let countrySelection = undefined;
      // input_data = removeNoData();
      
      // removes countries that have no data at all
      function removeNoData() {
        let tempArr = [];
        tempArr[0] = input_data[0];
        let tempArrIndex = 1;
        for (var i = 1; i < input_data.length; i++) {
          if (sumArrayIndex(input_data[i], 1, input_data[i].length) != 0) {
            tempArr[tempArrIndex] = input_data[i];
            tempArrIndex++;
          }
        }
        console.info("Removed countries with no data");
        console.log(input_data);
        return tempArr;
      }
      
      // summs all elements in an array between startIndex and endIndex
      function sumArrayIndex(arr, startIndex, endIndex) {
        let sum = 0;
        for (var i = startIndex; i < endIndex; i++) {
          sum += arr[i];
        }
        return sum;
      }


      // Responsible for drawing the map using the Google Charts library.
      function drawRegionsMap() {

        // console.log(input_data);

        // Check that the google.visualization object is defined
        if (!google.visualization) {
          console.error("Google Visualization API not loaded");
          return;
        }

        /* Creating a dictionary called `countryDict` that maps 
           certain country names to their corresponding values. */
        var countryDict = {
          'Bosnia and Herz.': 'Bosnia and Herzegovina',
          'North Macedonia': 'Macedonia',
          'Kosovo': {v: 'XK', f: 'Kosovo'}
        };
        for (var i = 0; i < input_data.length; i++)
        {
          var countryName = input_data[i][0];
          if (countryName in countryDict)
          {
            input_data[i][0] = countryDict[countryName];
          }
        }

        // Convert the input data to a DataTable
        var data = google.visualization.arrayToDataTable(buildTable(scale.value));
        if (countrySelection) {
          var pieData = google.visualization.arrayToDataTable(createPieChartTable(countrySelection));
        }
        else {
          var pieData = google.visualization.arrayToDataTable(buildTable("Linear"));
        }

        // Options for the map
        var optionsMap = {
          dataMode: 'regions',
          region: "150", //europe
          backgroundColor: "#212969",
          colorAxis: {minValue: 0},
          datalessRegionColor: "#a6a6a6",
        };

        // Options for the piechart
        var optionsPie = {
          title: countrySelection? countrySelection : "Europe",
          titleTextStyle: { color: "white",
            //fontName:,
            fontSize: 30,
            bold: true},
          pieHole: 0.4,
          backgroundColor: pubBackgroundColor,
          legend: {textStyle: {color: 'white'}},
          pieSliceBorderColor: pubBackgroundColor,
        };
        var chart = new google.visualization.PieChart(document.getElementById('donutchart'));
        chart.draw(pieData, optionsPie);
        //chart.draw(data, optionsPie);

        // Create the map and render it in the specified container
        var container = document.getElementById("regions_div");
        var map = new google.visualization.GeoChart(container);
        
        function myClickHandler(){
          var selection = map.getSelection()[0];
          // console.log(selection);
          if (selection) {
            // console.log(selection.row);
            if (countrySelection != data.getValue(selection.row, 0)) {
              countrySelection = data.getValue(selection.row, 0);
              console.info("The user selected", countrySelection);
            }
            else {
              countrySelection = undefined;
              console.info("The user selected Europe");
            }
            drawRegionsMap();
            // alert('The user selected ' + value);
          }
        }
        google.visualization.events.addListener(map, 'select', myClickHandler);
        map.draw(data, optionsMap);
      }

      // Find the column index of the requested energy type
      function findCol(value) {
        for (var i = 0; i < input_data[0].length; i++) {
          if (input_data[0][i] == value) {
            return i;
          }
        }
        // If there is no data return -1
        console.info("No data for energy type", "\"" + energyType.value + "\"");
        return -1;
      }

      // The `buildTable` function takes a scale as input and creates a table of data for the map.
      function buildTable(scale) {
        var table = [];
        var col = findCol(energyType.value);
        // If there is no data for the energy type return a table with no data
        if (col === -1) {
          table.push([input_data[0][0], "no-data"]);
        }
        // Else if there is data and the scale is set to linear build a new table 
        // with only the column for the country names and the requested energy type
        else if (scale == "Linear") {
          table.push([input_data[0][0], input_data[0][col] + " [MW]"]);
          for (var i = 1; i < input_data.length; i++) {
            if(input_data[i][col]!=-1){
              table.push([input_data[i][0], input_data[i][col]]);
            }
          }
        }
        // Else the scale is set to logarithmic, the data value is now an object with
        // a value v that is log10 of the original value and a formatted value f that
        // v is used for the color scale, f is used for the tooltip
        else if (scale == "Logarithmic") {
          table.push([input_data[0][0], input_data[0][col] + " [MW]"]);
          for (var i = 1; i < input_data.length; i++) {
            if(input_data[i][col]!=-1){
              let logVal;
              if (input_data[i][col] != 0) {
                logVal = Math.log10(input_data[i][col]);
              }
              else {
                logVal = 0;
              }
              let value = {v: logVal, f: input_data[i][col]};
              table.push([input_data[i][0], value]);
            }
          }
        }
        console.log(table);
        return table;
      }

      // The `createPieChartTable` function takes a country as input and creates a table of data for a pie chart.
      function createPieChartTable(country) {
        if (country) {
          let row = findRow(country);
          let table = [];
          for (var i = 0; i < input_data[0].length; i++) {
            if (input_data[row][i] != -1) {
              table.push([input_data[0][i], input_data[row][i]]);
            }
          }
          console.log(table);
          return table;
        }
        else {
          let table = [];
          table.push([input_data[0][0], input_data[0][col] + " [MW]"]);
          for (var i = 1; i < input_data.length; i++) {
            if(input_data[i][col]!=-1){
              table.push([input_data[i][0], input_data[i][col]]);
            }
          }
        }
      }

      function findRow(country) {
        for (var i = 0; i < input_data.length; i++) {
          if (input_data[i][0] == country) {
            return i;
          }
        }
        // If there is no data return -1
        console.info("No data for country", "\"" + country + "\"");
        return -1;
      }


    </script>
  </head>
  <body>
    <div>
      <div class="index-container">
        <h1 class="index-text">Welcome to EnergyMap</h1>
        <div class="index-container1">
          <div class="index-container2">
            <div class="index-goe">
              <div id="regions_div" style="width: 80%; height: 80%"></div>
            </div>
          </div>
          <div class="index-container3">
            <form>
              <label for="energyType">Choose an energyType:</label>
              <select name="energyType" id="energyType">
                <option value="Biomass">Biomass</option>
                <option value="Fossil Brown coal/Lignite">Fossil Brown coal/Lignite</option>
                <option value="Fossil Coal-derived gas">Fossil Coal-derived gas</option>
                <option value="Fossil Gas">Fossil Gas</option>
                <option value="Fossil Hard coal">Fossil HardCoal</option>
                <option value="Fossil Oil">Fossil Oil</option>
                <option value="Fossil Oil shale">Fossil Oil Shale</option>
                <option value="Fossil Peat">Fossil Peat</option>
                <option value="Geothermal">Geothermal</option>
                <option value="Hydro Pumped Storage">Hydro Pumped Storage</option>
                <option value="Hydro Run-of-river and poundage">Hydro Run-of-river and poundage</option>
                <option value="Hydro Water Reservoir">Hydro Water Reservoir</option>
                <option value="Nuclear">Nuclear</option>
                <option value="Solar" selected="selected">Solar</option>
                <option value="Waste">Waste</option>
                <option value="Wind Offshore">Wind Offshore</option>
                <option value="Wind Onshore">Wind Onshore</option>
                <option value="Other renewable">Other renewable</option>
                <option value="Other">Other</option>
              </select>
            </form>

            <form>
              <label for="colorScale">Chose color scale (tooltip always shows real value):</label>
              <select name="colorScale" id="colorScale">
                <option value="Linear" selected="selected">Linear</option>
                <option value="Logarithmic">Logarithmic</option>
              </select>
            </form>

            <div id="donutchart" style="width: 900px; height: 500px;"></div>
            

          </div>
        </div>
      </div>
    </div>

     <script>
      // update the map if the user changes the energy type or the color scale
      var scale = document.getElementById("colorScale");
      var energyType = document.getElementById("energyType");
      function onChange() {
        console.info("Selected:", scale.value, energyType.value);
        /*  Sets up a callback function to be executed when the Google Charts library 
            has finished loading. In this case, the callback function is 
            `drawRegionsMap()`, which is responsible for drawing the map using 
            the loaded library. By using this function, the map will only be drawn 
            once the necessary library has been loaded, ensuring that the map is 
            rendered correctly. */
        google.charts.setOnLoadCallback(drawRegionsMap);
        //google.charts.setOnLoadCallback(drawPieChart);
        
      }
      scale.onchange = onChange;
      energyType.onchange = onChange;
      onChange();
    </script>
  </body>
</html>
